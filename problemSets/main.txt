
Maintain familiarity with the following:

Data Structures (can implement all of these):
- arr
- linked list
- heap
- graph
- tree
- trie

Python Libs (can use all of these):
- deque
  --> init
  --> appendleft
  --> pop
- heapq
  --> init
  --> heappush
  --> pop
- collections.defaultdict(list)
  --> can just append without setting things as a list
- list comprehension
- set a list to be the union with another list
  a = set({1,2,3})
  b = set({2,3,4})
  a |= b
  a --> {1,2,3,4}
- set a list to remove the intersection with another list
  a = set({1,2,3})
  b = set({2,3,4})
  a |= b
  a --> {1,4}
- set a list to be the intersection with another list
  a = set({1,2,3})
  b = set({2,3,4})
  a &= b
  a --> {1,4}
- sort a list of tuples by the first element:
  intervals.sort(key=lambda x: x[0])
- sort a list of tuple by the first two elements:
  intervals.sort(key=lambda x: (x[0], -x[1]))
- sort a list of tuple by the first two elements, with reversing the second sort order:
  intervals.sort(key=lambda x: (x[0], -x[1]))

Algos:
- binary search
- dfs
- bfs
- in order
- pre order
- post order
- level order
- merge sort
- quick sort
- kadane's algorithm, find max subarray sum
- dijkstra's algo
- next lexigraphical element
- nCk math formula

./tricks.txt
./algos.txt

Figure out what this list is
Write code where you can implement it/have test cases run against it
Then drill tf out of the question list.

Write code that will randomly pick a question from:
- blind top 75
- top 100 liked questions
- top 100 facebook tagged questions

Remove all repeats.

Once we can implement this stuff easily and get all these questions right
the first time, then get premium and add on the premium facebook questions.


Have a list of tricks that we won't be able to lookup in the interview, practice them
